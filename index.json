[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"http://cntommy.github.io/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"updates","tags":null,"title":"April 2019","uri":"http://cntommy.github.io/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"March 2019","uri":"http://cntommy.github.io/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"updates","tags":null,"title":"February 2019","uri":"http://cntommy.github.io/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"January 2019","uri":"http://cntommy.github.io/updates/2019_january/"},{"content":"how to decide the value of a thing\nis it a correct thing?\nsome things is universally recognized as a correct thing, if i haven\u0026rsquo;t figure out or not conflict with other thing, just do it. is the thing has high ROI\nsomething has expected return, like writing paper do i like the thing\nsomething can relax myself and helps improving skills ","description":"","id":5,"section":"docs","tags":null,"title":"decide-what-to-do","uri":"http://cntommy.github.io/docs/20221019155555/"},{"content":"为什么选择emacs 接触emacs是因为在一次组会上听到付老师用它作为科研笔记和文献管理的工具，由于其双链的功能和对latex的支持非常适合梳理一些杂乱的思路和生成论文，因此想学习一下，虽然传言学习曲线非常陡峭。\n本笔记的目的是记录刚开始使用emacs的一些坑和常用功能。\n最开始分别用过apple备忘录、有道云、onenote作为科研的笔记软件，感受到最大的痛点就是：树状笔记管理非常麻烦，得提前归档好目录供每个笔记选择。其次就是同步慢、对代码支持不够好等等小毛病，因此就像选一个能够不用树状来管理笔记的软件，双链笔记就进入了我的考虑范围。在对比了logseq、obsidian和emacs之后，发现还是emacs上限更高，想下决心试试。\norg-mode 搜索 稳定性 html导出 学习曲线 latex支持 代码实时运行 emacs 支持 全局 好 支持 陡峭 全集 支持 logseq 支持 全局 会有bug ？ 稍简单 子集 不支持 obsidian 不支持 文件 好 ？ 稍简单 子集 不支持 软件安装 首先使用brew命令安装emacs,\u0026rsquo;\u0026ndash;cask\u0026rsquo;表示安装带有图形界面的软件，如果安装比较慢可以考虑给brew换国内源1\nbrew update brew install --cask emacs 安装完成之后界面确实看着不好看，于是就照着教程重新配置了外观\ncd ~ rm -rf .emacs #如果手动修改过emacs的配置可能会产生这个文件，删除可以避免后面的配置文件失效 cd ~/.emacs.d touch init.el #创建配置文件 接着打开emacs，输入C-x C-f，会等待输入打开的文件，输入~/.emacs.d/init.el \u0026lt;RET\u0026gt;，输入命令刷新安装包列表\nM-x package-refresh-contents 再把下面的配置代码粘贴到文件中\n;; 窗口最大化 (add-to-list \u0026#39;default-frame-alist \u0026#39;(fullscreen . maximized)) ;; 系统共享剪切板 ;; see also: ;; https://www.emacswiki.org/emacs/CopyAndPaste ;; https://www.reddit.com/r/emacs/comments/5n9t3f/copypaste_from_system_clipboard_on_windows/ (defun copy-from-osx () (shell-command-to-string \u0026#34;pbpaste\u0026#34;)) (defun paste-to-osx (text \u0026amp;optional push) (let ((process-connection-type nil)) (let ((proc (start-process \u0026#34;pbcopy\u0026#34; \u0026#34;*Messages*\u0026#34; \u0026#34;pbcopy\u0026#34;))) (process-send-string proc text) (process-send-eof proc)))) (cond ((memq window-system \u0026#39;(x)) (setq x-select-enable-primary t x-select-enable-clipboard nil)) ((memq window-system \u0026#39;(mac ns)) (setq interprogram-cut-function \u0026#39;paste-to-osx interprogram-paste-function \u0026#39;copy-from-osx)) ((memq window-system \u0026#39;(win32 pc)) (setq select-enable-primary t select-enable-clipboard t save-interprogram-paste-before-kill t))) ;; 指定自定义配置文件，防止自定义配置污染 init.el，并加载该配置文件 (setq custom-file (expand-file-name \u0026#34;~/.emacs.d/custom.el\u0026#34;)) (if (file-exists-p custom-file) (load custom-file)) ;; Font ;; Download Victor Mono at https://rubjo.github.io/victor-mono/ (set-face-attribute \u0026#39;default nil :height 170 :weight \u0026#39;normal) ;; (set-face-attribute \u0026#39;default nil :family \u0026#34;Victor Mono\u0026#34; :height 170 :weight \u0026#39;normal) ;; 中文显示 (set-language-environment \u0026#34;utf-8\u0026#34;) (set-buffer-file-coding-system \u0026#39;utf-8) (set-terminal-coding-system \u0026#39;utf-8) (set-keyboard-coding-system \u0026#39;utf-8) (set-selection-coding-system \u0026#39;utf-8) (set-default-coding-systems \u0026#39;utf-8) (set-clipboard-coding-system \u0026#39;utf-8) (modify-coding-system-alist \u0026#39;process \u0026#34;*\u0026#34; \u0026#39;utf-8) (prefer-coding-system \u0026#39;utf-8) (setq-default pathname-coding-system \u0026#39;utf-8) (setq default-process-coding-system \u0026#39;(utf-8 . utf-8) locale-coding-system \u0026#39;utf-8 file-name-coding-system \u0026#39;utf-8 default-buffer-file-coding-system \u0026#39;utf-8 slime-net-coding-system \u0026#39;utf-8-unix) (setenv \u0026#34;LC_CTYPE\u0026#34; \u0026#34;UTF-8\u0026#34;) (setenv \u0026#34;LC_ALL\u0026#34; \u0026#34;en_US.UTF-8\u0026#34;) (setenv \u0026#34;LANG\u0026#34; \u0026#34;en_US.UTF-8\u0026#34;) ; Iterate through CamelCase words ;; 基本设置 (setq-default indicate-buffer-boundaries \u0026#39;left ;; 在窗口边缘上显示一个小箭头指示当前 buffer 的边界 delete-by-moving-to-trash t ;; 删除文件移动到垃圾箱 window-combination-resize t ;; 新窗口平均其他左右窗口 x-stretch-cursor t ;; 将光标拉伸到字形宽度 kill-whole-line t) ;; C-k时,同时删除该行 ;;; Tidy workdir (make-directory \u0026#34;~/.emacs.d/data/backup/\u0026#34; t) (setq auto-save-file-name-transforms \u0026#39;((\u0026#34;.*\u0026#34; \u0026#34;~/.emacs.d/data/backup/\u0026#34; t)) ; Write auto-save files to a separate directory backup-directory-alist \u0026#39;((\u0026#34;.\u0026#34; . \u0026#34;~/.emacs.d/data/backup/\u0026#34;)) ; Write backup files to a separate directory create-lockfiles nil ; Disable lockfiles as I use only one Emacs instance ) (setq fringes-outside-margins t ;; fringe 放在外面 echo-keystrokes 0.1 ;; 尽快显示按键序列 system-time-locale \u0026#34;zh_CN\u0026#34; ;; 设置系统时间显示格式 tab-always-indent \u0026#39;complete ;; Tab 键优先格式化再补全 font-lock-global-modes \u0026#39;(not shell-mode text-mode) ;; 设置语法高亮.除shell-mode和text-mode之外的模式 mouse-yank-at-point t ;; 不在鼠标点击的地方插入剪贴板内容 kill-ring-max 200 ;; 设置 kill ring 个数 default-fill-column 60 ;; 把fill-column设为60.让文字更好读 enable-recursive-minibuffers t ;; 递归的使用minibuffer scroll-margin 3 ;; 在靠近屏幕边沿 3 行时就开始滚动,可很好看到上下文 scroll-conservatively 10000 ;; 防止页面滚动时跳动 select-enable-clipboard t ;; 允许emacs和外部程序进行粘贴 track-eol t ;; 当光标在行尾上下移动的时候,始终保持在行尾 next-line-add-newlines nil ;; 按C-n或down时不添加新行 ;; emacs启动时显示的内容可以通过变量initial-scratch-message来设置 initial-scratch-message nil dired-listing-switches \u0026#34;-vha\u0026#34; ;; dired 列出文件的参数（man ls） show-paren-style \u0026#39;parenthesis ;; 括号匹配时高亮显示另一边的括号，而不是跳到另一个括号处 undo-limit 80000000 ;; 提升撤销限制 auto-save-default t ;; 打开自动保存 truncate-string-ellipsis \u0026#34;…\u0026#34; ;; Unicode ellispis are nicer than \u0026#34;...\u0026#34;, and also save /precious/ space ;; 当寻找一个同名的文件,改变两个buffer的名字,前面加上目录名 uniquify-buffer-name-style \u0026#39;post-forward-angle-brackets) (if (display-graphic-p) (progn (menu-bar-mode -1) ;; 取消菜单栏 (scroll-bar-mode -1) ;; 取消滚动条（在 Emacs 26 中无效） (tool-bar-mode -1))) ;; 取消工具栏 (fset \u0026#39;yes-or-no-p \u0026#39;y-or-n-p) ;; 按y或space表示yes,n表示no (global-font-lock-mode t) ;; 语法高亮 (show-paren-mode t) ;; 打开括号匹配显示模式 (mouse-avoidance-mode \u0026#39;animate) ;; 鼠标靠近光标指针时,让鼠标自动让开 (auto-compression-mode 1) ;; 打开压缩文件时自动解压缩 (global-auto-revert-mode 1) ;; 自动重载更改的文件 (blink-cursor-mode -1) ;; 指针不要闪 (toggle-truncate-lines t) ;; 当一行文字太长时,不自动换行 (column-number-mode t) ;; 在minibuffer上面的状态栏显示文件的行号,列号 (line-number-mode t) ;;设定显示文件的参数,以版本/人性化的显示,就是ls的参数 (global-linum-mode t) ;; 显示行号 (require \u0026#39;saveplace) (save-place-mode 1) ;; 记住上次打开文件光标的位置 (global-subword-mode 1) ;; 拆分连字符：oneWord 会被当作两个单词处理 ;; 设置4个空格缩进 (setq-default indent-tabs-mode nil) (setq tab-width 4) ; or any other preferred value ;; 时间显示设置 (display-time-mode 1) ;; 启用时间显示设置,在minibuffer上面的那个杠上 (setq display-time-24hr-format t ;; 时间使用24小时制 display-time-day-and-date t ;; 时间显示包括日期和具体时间 display-time-use-mail-icon t ;; 时间栏旁边启用邮件设置 display-time-interval 10 ;; 时间的变化频率 display-time-format \u0026#34;%A %H:%M\u0026#34;) ;; 显示时间的格式 (unless (string-match-p \u0026#34;^Power N/A\u0026#34; (battery)) ; 笔记本上显示电量 (display-battery-mode 1)) 然后再执行M-x eval-buffer，可以看到emacs外观的变化，这样就修改成功了。\n下一步就是安装几个外观的插件，由于straight.el包管理一直报错，折腾一会之后打算还是用内置的package.el来管理包，再之前的文件后追加内容：\n;; use-package安装 (add-to-list \u0026#39;load-path \u0026#34;~/.emacs.d/site-lisp/use-package\u0026#34;) (require \u0026#39;use-package) (with-eval-after-load \u0026#39;info (info-initialize) (add-to-list \u0026#39;Info-directory-list \u0026#34;~/.emacs.d/site-lisp/use-package/\u0026#34;)) ;; 设置源 (require \u0026#39;package) (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa-stable\u0026#34; . \u0026#34;https://stable.melpa.org/packages/\u0026#34;)) (use-package all-the-icons :ensure t) (use-package doom-themes :ensure t :config ;; Global settings (defaults) (setq doom-themes-enable-bold t ; if nil, bold is universally disabled doom-themes-enable-italic t) ; if nil, italics is universally disabled (load-theme \u0026#39;doom-vibrant t) ;; Enable flashing mode-line on errors (doom-themes-visual-bell-config) ;; Enable custom neotree theme (all-the-icons must be installed!) (doom-themes-neotree-config) ;; or for treemacs users (setq doom-themes-treemacs-theme \u0026#34;doom-atom\u0026#34;) ; use \u0026#34;doom-colors\u0026#34; for less minimal icon theme (doom-themes-treemacs-config) ;; Corrects (and improves) org-mode\u0026#39;s native fontification. (doom-themes-org-config)) (use-package doom-modeline :ensure t :hook (after-init . doom-modeline-mode)) ;; (use-package nyan-mode) (use-package dashboard :ensure t :config (dashboard-setup-startup-hook)) ;;(setq dashboard-center-content t) ;;(setq dashboard-set-heading-icons t) ;;(setq dashboard-set-file-icons t) ;;(setq initial-buffer-choice (lambda () (get-buffer \u0026#34;*dashboard*\u0026#34;))) (setq my/all-notes \u0026#34;~/notes/\u0026#34;) (require \u0026#39;org-tempo) (use-package org :bind ;; 冲突 ;; (\u0026#34;C-c c\u0026#34; . org-capture) ;; (\u0026#34;C-c a o\u0026#34; . org-agenda) (\u0026#34;C-c C-.\u0026#34; . org-mark-ring-goto) :custom (org-startup-indented t) (org-hide-leading-stars t) (org-odd-level-only nil) (org-insert-heading-respect-content nil) (org-M-RET-may-split-line \u0026#39;((item) (default . t))) (org-special-ctrl-a/e t) (org-return-follows-link nil) (org-use-speed-commands t) (org-startup-align-all-tables nil) (org-log-into-drawer nil) (org-tags-column 1) (org-ellipsis \u0026#34; \\u25bc\u0026#34; ) (org-speed-commands-user nil) (org-blank-before-new-entry \u0026#39;((heading . nil) (plain-list-item . nil))) (org-completion-use-ido t) (org-indent-mode t) (org-startup-truncated nil) :custom-face (org-headline-done ((nil (:strike-through t)))) :init (require \u0026#39;org-id) (defun my/org-id-update-id-locations-current-dir() \u0026#34;Update id locations from current dir.\u0026#34; (interactive) (org-id-update-id-locations (directory-files \u0026#34;.\u0026#34; t \u0026#34;\\.org\\$\u0026#34; t))) (org-babel-do-load-languages \u0026#39;org-babel-load-languages \u0026#39;((dot . t)))) (setq org-roam-database-connector \u0026#39;sqlite3) (use-package org-roam :ensure t :config ;; If using org-roam-protocol (require \u0026#39;org-roam-protocol) :bind (\u0026#34;C-c n l\u0026#34; . org-roam-buffer-toggle) (\u0026#34;C-c n f\u0026#34; . org-roam-node-find) (\u0026#34;C-c n g\u0026#34; . org-roam-graph) (\u0026#34;C-c n i\u0026#34; . org-roam-node-insert) (\u0026#34;C-c n c\u0026#34; . org-roam-capture) ;; Dailies (\u0026#34;C-c n j\u0026#34; . org-roam-dailies-capture-today) :custom (org-roam-v2-ack t) (org-roam-directory (string-join (cons my/all-notes \u0026#39;(\u0026#34;content-org\u0026#34;)) \u0026#34;/\u0026#34;)) (org-roam-capture-templates `((\u0026#34;d\u0026#34; \u0026#34;default\u0026#34; plain \u0026#34;%?\u0026#34; :unnarrowed t :if-new (file+head \u0026#34;%\u0026lt;%Y%m%d%H%M%S\u0026gt;-${slug}.org\u0026#34; \u0026#34;#+TITLE: ${title} #+AUTHOR: Jun Gao #+DATE: %U #+HUGO_BASE_DIR: ../ #+HUGO_SECTION: notes \u0026#34;))))) (use-package org-superstar :hook (org-mode . (lambda () (org-superstar-mode 1)))) 中间有一些设置因为报错先注释掉了，准备之后有时间再慢慢调教，当务之急还是先学习做笔记的功能，增加完上述代码之后再次执行\nM-x eval-buffer 然后安装一下all-the-icons的字体\nM-x all-the-icons-install-fonts 就能开始愉快的做笔记啦！\n主要参考了2\n常用功能 我的需求是用来做科研笔记，同时可能记录一些日常，接下来从软件的界面到功能进行记录：\n软件界面及相关术语\n术语 解释 buffer 缓冲，完成编辑操作的区域 frame 用了感觉是新的窗口的意思 window 特定frame下的子窗口，可以嵌套 minibuffer 底部输入指令的区域 window\u0026amp;frame操作\n全屏当前frame？ C-x o 切换window C-x 5 o 切换frame C-x 0 删除当前window C-x 5 0 删除当前frame C-x 1 只保留当前window C-x 5 1 只保留当前frame C-x 2 上下分裂window C-x 5 2 分裂frame C-x 3 左右分裂window C-x C-b 列出所有的buffer C-x C-c 退出emacs（不保留没关联的buffer？） 帮助\nC-h b 查看当前buffer的快捷键 编辑操作\n移动 C-f 后一个字符 C-b 前一个字符 M-f 后一个单词 M-b 前一个单词 C-n 下一行 C-p 上一行 C-a 行开头 C-e 行结尾 M-a 句子开头 M-e 句子结尾，这两个命令对上下移动比较快速 M-g g 根据行号跳转 C-c C-n 移动到下一个标题 C-c C-f 移动到同等级的下一个标题 C-c C-x C-n 移动到下一个链接 C-a C-k C-k 删除一行（不留空行） C-u 3 C-k 删除3行（不留空行） C-@ 标记选择 C-w 剪切 M-w 复制 C-y 粘贴 M-y 替换粘贴内容为更早的kill C-/ 撤销 C-q 输入控制字符，如TAB M-x replace-s\u0026lt;RET\u0026gt;before\u0026lt;RET\u0026gt;after\u0026lt;RET\u0026gt; 替换光标后的所有字符串 M-x xxx-mode 切换为xxx major/minor mode C-s 查找 全局查找？ C-x n s 聚焦当前字内容 C-x n w 退出聚焦 C-c C-x f 当前point添加脚注，并跳转 目录\u0026amp;文件操作3\nM-S-d 浏览特定目录 C-x C-f 打开文件 C-x C-s 保存文件 C-x s 询问每个和file关联的buffer要不要保存 M-x recover-this-file\u0026lt;RET\u0026gt; 恢复文件 M-x recover-file\u0026lt;RET\u0026gt;filename\u0026lt;RET\u0026gt; M-x ediff-files 比较两个文件 j 跳到第一个差异处 \u0026lt;SPA\u0026gt; 下一个差异处 http://blog.lujun9972.win/blog/2016/12/10/emacs%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8--dired%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/\n截图、插入图片并显示4, 5\n首先在init中配置org-download，然后用brew安装pngpaste，就能实现C-M-y快捷键截图插入，同时保存在\u0026quot;~/notes/images\u0026quot;目录下\n;; 图片管理 (package-install \u0026#39;org-download) (use-package org-download :ensure t :config ;; Drag-and-drop to `dired` (add-hook \u0026#39;dired-mode-hook \u0026#39;org-download-enable) (require \u0026#39;org-download) :custom (org-download-method \u0026#39;directory) (org-download-image-dir \u0026#34;~/notes/images\u0026#34;) (org-download-heading-lvl nil) (org-download-timestamp \u0026#34;%Y%m%d-%H%M%S_\u0026#34;) ;; 将图片显示大小固定位屏幕宽度的三分之一 (org-image-actual-width (/ (display-pixel-width) 3)) (org-download-screenshot-method \u0026#34;/usr/local/bin/pngpaste %s\u0026#34;) :bind (\u0026#34;C-M-y\u0026#34; . org-download-screenshot)) 图片插到文中之后，还可以通过C-c C-x C-v设置显示的方式是连接还是原图\nnode相关操作 C-c n f 查找/新建node C-c n i 在buffer中插入node C-c C-c 确认 C-c C-k 取消 C-c C-o 跳转到光标所在node C-c C-. 返回到之前的node C-c n l 调出backlink 主要参考了以下博客：\norg-mode\n表格操作\n参考6\n文献管理\n看了网上的推荐之后，决定试一试zotero+zotxt-emacs\n首先给zotero安装zotxt插件，用于和emacs关联，同时给emacs安装zotxt，在init文件中添加\n;; 文献管理 (package-install \u0026#39;zotxt) 然后让init文件生效，同时打开zotxt的minor mode\nM-x eval-buffer M-x org-zotxt-mode 为了生成pdf时能自动生成引用编号，还需要给zotero安装 pandoc-zotxt.lua 和 Better BibTeX插件，常用的操作有下面这些\nC-c \u0026#34; i 检索zotero文献库，并插入条目 C-c \u0026#34; a 打开文献 C-c \u0026#34; u 从zotero库更新当前连接 由于zotero官方给的文献同步空间只有300MB，可能用了一段时间会不够用，又不知道怎么利用syncthing来给zotero用，坚果云免费版每月有1G上传流量，3G下载流量，空间不限，感觉还是比较够用的，参考网上的教程配置一下7。\n除此之外还发现了zotero有给文献重命名的插件8，试了之后发现非常好用！\n过程中的问题\nemacs打开代理后会对zotxt造成影响，还不知道怎么解决 https://emacs-china.org/t/emacs/12580\nhttps://zhuanlan.zhihu.com/p/526795352?utm_id=0\nhttps://zhuanlan.zhihu.com/p/351003732\n自动保存上传git，自动下拉,syncthing同步\n尝试了最简单暴力的方法，直接将文件夹~/notes上传到github，然后在新电脑上应用init.el的配置（配置怎么同步后续再研究一下），然后git pull仓库后执行：\nM-x org-roam-db-sync 但是这种方法比较麻烦，适合低频率使用，于是选择syncthing作为日常的同步方案\n除此之外还有别的同步方案：https://emacs-china.org/t/org-files-git/19461\n其他优化 cpu占用高 (setq history-length 100) (put \u0026#39;minibuffer-history \u0026#39;history-length 50) (put \u0026#39;evil-ex-history \u0026#39;history-length 50) (put \u0026#39;kill-ring \u0026#39;history-length 25) 删除当前文件9 (defun fdx/delete-current-buffer-file () \u0026#34;Removes file connected to current buffer and kills buffer.\u0026#34; (interactive) (let ((filename (buffer-file-name)) (buffer (current-buffer)) (name (buffer-name))) (if (not (and filename (file-exists-p filename))) (ido-kill-buffer) (when (yes-or-no-p \u0026#34;Are you sure you want to remove this file? \u0026#34;) (delete-file filename) (kill-buffer buffer) (message \u0026#34;File \u0026#39;%s\u0026#39; successfully removed\u0026#34; filename))))) org-roam-db-sync\n发现每次db都不能自动同步，应该是需要打开M-x org-roam-db-autosync-mode来自动同步 文件名和TITLE对齐\n如果文件名会插入第一次设置的TITLE，那么后续修改起来会很麻烦，如果文件名默认不带TITLE，那后续就不会有这个麻烦了，而且这个不影响node的索引。10 待实现的需求 mind map\n从arxiv自动订阅带关键词的论文\nppt制作\nhttps://www.youtube.com/watch?v=vz9aLmxYJB0\nhugo生成博客\n安装插件\n为了把笔记导出到网站，需要用到ox-hugo插件，在init.el中添加 (use-package ox-hugo :ensure t ;Auto-install the package from Melpa :pin melpa ;`package-archives\u0026#39; should already have (\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;) :after ox) 然后执行 M-x eval-buffer\n现在就可以写一篇用于博客发布的org笔记了，写完之后需要转化为 .md 文件才能发布到博客，因为我需要导出到博客的笔记暂时还比较少，打算先用单独添加的方法，只需在需要发布的org文件结尾添加\n​* COMMENT Local Variables :ARCHIVE: # Local Variables: # eval: (org-hugo-auto-export-mode) # End: 如果想要对所有的org文件都执行自动保存用于发布，可以参考11。\n接下来执行 C-x C-s 保存文件就能在minibuffer看到文件已导出到 .md 文件（如果没有重新打开一下emacs）\n创建git仓库\n这一步是为了之后能用到github pages进行发布。首先要安装git，然后到github新建一个名为 username.github.io 的仓库，其中 username 是你自己的github用户名，如我的cntommy.github.io $ cd ~/notes $ git init #进行仓库初始化 $ git remote add origin https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git $ git add . \u0026amp;\u0026amp; git commit -m \u0026#39;init\u0026#39; $ git push origin main 然后配置 github action 进行自动化发布 $ cd ~/notes $ mkdir -p .github/workflows 打开emacs执行 C-x C-f ~/notes/.github/workflows/main.yml RET ，把下面的内容12粘贴进去，按 C-x C-s 保存 name: github pages on: push: branches: ​ - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: ​ - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 接下来再执行 C-x C-f ~/notes/config.toml RET 调整配置，并保存 baseURL = \u0026#34;http://username.github.io/\u0026#34; # 替换 username 为你自己的用户名 最后打开github对应仓库的setting，把pages的branch修改为hugo默认的gh-pages 配置主题\n在网上看到了比较喜欢的zdoc主题，颜值和实用性都比较高，就是配置起来会稍微麻烦一点，预览图如下所示，接下来开搞！ 首先在需要给当前的仓库添加主题子模块\n$ cd ~/notes $ git submodule add https://github.com/zzossig/hugo-theme-zdoc.git themes/zdoc 然后把 zdoc/exampleSite/ 目录下的四个文件夹拷贝到hugo的项目根目录 ~/notes 下，再在 ~/notes/content/en/docs/ 目录中添加 .md 笔记文件\n然后提交配置文件和笔记\n$ git add . $ git commit -m \u0026#39;add workflow\u0026#39; $ git push origin master 就能通过 username.github.io 访问了~\n这块内容主要参考了这几篇文章13, 2\n修改node名字\n修改TITLE，就能更改node名字，如果要解决文件名不一致的问题，再修改文件名14\n代码块自动生成\n需要在init文件中加入(require \u0026lsquo;org-tempo)\nbacklink\n副窗口怎么常显示\n导出pdf\nlatex mode\n公式\nhttps://zhuanlan.zhihu.com/p/526795352?utm_id=0\n目录树\n;; 目录树 (package-install \u0026#39;neotree) (global-set-key [f8] \u0026#39;neotree-toggle) U 进入上一级目录 g 刷新 C-c C-n 创建目录或文件 C-c C-d 删除目录或文件 C-c C-r 重命名目录或文件 rss\n首先安装crul\nbrew install crul 然后安装elfeed，同时设置rss源15\n;; elfeed for rss (package-install \u0026#39;elfeed) (setq elfeed-feeds \u0026#39;(\u0026#34;http://iccircle.com/feed\u0026#34;)) 然后就能用M-x elfeed打开使用，其他的一些命令如下\nM-x elfeed-add-feed 添加源 M-x elfeed-update 更新源 M-x elfeed-search-set-filter 修改过滤条件 用的过程中发现了问题，没法更新，原因是很多源都不能用了，下面是一些目前还能用的\n(\u0026#34;https://www.zhihu.com/rss\u0026#34; zhihu) ;(\u0026#34;http://feeds.feedburner.com/zhihu-daily\u0026#34; news) (\u0026#34;https://planet.emacslife.com/atom.xml\u0026#34; emacs) ;(\u0026#34;https://www.reddit.com/r/emacs.rss\u0026#34; emacs) ;;(\u0026#34;https://www.reddit.com/r/orgmode.rss\u0026#34; emacs) (\u0026#34;https://rsshub.app/rsshub/rss\u0026#34; rss) (\u0026#34;https://rsshub.app/twitter/user/DIYgod\u0026#34; tw) 同时还可添加的一些源\nLink: https://docs.rsshub.app/new-media.html#wei-xin https://www.kexue.fm/feed elfeed-org用于管理rss源16，但是安装出现了一些问题\nelfeed-summary用于提供干净的浏览界面\nM-x elfeed-summary 打开浏览界面 R 刷新源 U 批量标记为已读 M-RET 阅读同时保留未读 u 是否只显示未读 全局搜索\nhttps://emacs-china.org/t/topic/5618\n进度管理\n为了对不同的项目进度进行概览，准备试一下org-mode的任务管理用法，同时记录一些快捷键，参考了这两篇教程17 , 18\nC-c C-t 改变标题任务状态标记 S-LEFT/RIGHT C-c C-w 将当前光标标题及子树移到更高级标题下 S-UP/DOWN 改变任务优先级 [%] [/] 跟踪当前任务下子任务的情况 M-S-\u0026lt;RET\u0026gt; 插入带复选框的同级列表 C-c C-c 列表：改变复选框状态/headline：设置标签 M-S-\u0026lt;RET\u0026gt; 增加一个子项 C-S-\u0026lt;RET\u0026gt; 在当前子项内容后增加子项 C-c / 大纲检索（状态或关键词） C-c \u0026lt; 输入当前日期时间戳 C-c \u0026gt; 查看日历 S-LEFT/RIGHT/UP/DOWN 调整日期 C-c ! 仅输入日期 -- 定义时间段 C-c C-y 计算时间间隔 C-c C-s +1d 10am 设定任务计划时间 C-c C-d 设定任务deadline C-c a t 进入全局TODO列表 t 改变任务状态 \u0026lt;RET\u0026gt;跳到源文件 跳回？ C-c a a 进入日程表视图 l 显示日志(完成时间） C-c C-x C-c 打开column view g 刷新 C-c C-c q 退出column view 首先修改一下定义任务状态的关键词，在init中添加\n(setq org-todo-keywords \u0026#39;((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;ONGOING(o)\u0026#34; \u0026#34;MAYBE(m)\u0026#34; \u0026#34;WAIT(w)\u0026#34; \u0026#34;DELEGATED(d)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(f)\u0026#34; \u0026#34;CANCELLED(c)\u0026#34; \u0026#34;STUCK(s)\u0026#34;))) 然后重启一下emacs就能生效，如果要增加时间戳在关键字后面加！就行，如\u0026quot;TODO(t！)\u0026quot;，如果需要增加切换状态说明，则加@（都加用/分隔）\n为了方便全局的任务管理，可以根据自己的目录配置全局的清单和快捷键\n;; 配置全局任务文件清单和快捷键 (setq org-agenda-files (list \u0026#34;~/notes/content-org/\u0026#34;)) (global-set-key \u0026#34;\\C-cl\u0026#34; \u0026#39;org-store-link) (global-set-key \u0026#34;\\C-cc\u0026#34; \u0026#39;org-capture) (global-set-key \u0026#34;\\C-ca\u0026#34; \u0026#39;org-agenda) (global-set-key \u0026#34;\\C-cb\u0026#34; \u0026#39;org-iswitchb) ;; 禁用任务组标签继承 (setq org-tags-exclude-from-inheritance \u0026#39;(\u0026#34;TG\u0026#34;)) 接下来修改视图的显示\n;; Skip entries which only have timestamp but no TODO keywords. (defun tjh/org-agenda-skip-only-timestamp-entries () (org-agenda-skip-entry-if \u0026#39;nottodo \u0026#39;any)) ;; Skip entries which are not deadlines. (defun tjh/org-agenda-skip-not-deadline-entries () (org-agenda-skip-entry-if \u0026#39;notdeadline)) ;; Skip entries which are not finished. (defun tjh/org-agenda-skip-unfinished-entries () (org-agenda-skip-entry-if \u0026#39;nottodo \u0026#39;(\u0026#34;DONE\u0026#34;))) ;; Skip unscheduled entries. (defun tjh/org-agenda-skip-scheduled-entries () (org-agenda-skip-entry-if \u0026#39;timestamp \u0026#39;todo \u0026#39;(\u0026#34;ONGOING\u0026#34; \u0026#34;WAIT\u0026#34; \u0026#34;DELEGATED\u0026#34;) \u0026#39;regexp \u0026#34;:TG:\u0026#34;)) (setq org-agenda-custom-commands \u0026#39;( ;; Display general agenda for each project. (\u0026#34;A\u0026#34; . \u0026#34;Default agenda view\u0026#34;) (\u0026#34;Aa\u0026#34; \u0026#34;Agenda for all projects\u0026#34; agenda \u0026#34;\u0026#34; ((org-agenda-skip-function \u0026#39;tjh/org-agenda-skip-only-timestamp-entries) (org-agenda-overriding-header \u0026#34;Agenda for all projects: \u0026#34;)) \u0026#34;~/notes/content-org/org-html-exports/Agenda-All.html\u0026#34;) ;; Display all tasks with deadline. (\u0026#34;D\u0026#34; . \u0026#34;Agenda view for deadlines\u0026#34;) (\u0026#34;Da\u0026#34; \u0026#34;Agenda view for all deadlines\u0026#34; agenda \u0026#34;\u0026#34; ((org-agenda-skip-function \u0026#39;tjh/org-agenda-skip-not-deadline-entries) (org-agenda-overriding-header \u0026#34;All deadlines: \u0026#34;)) \u0026#34;~/notes/content-org/org-html-exports/Deadline-All.html\u0026#34;) ;; Display all finished tasks. (\u0026#34;F\u0026#34; . \u0026#34;Agenda view for finished tasks\u0026#34;) (\u0026#34;Fa\u0026#34; \u0026#34;Agenda view for all finished tasks\u0026#34; agenda \u0026#34;\u0026#34; ((org-agenda-skip-function \u0026#39;tjh/org-agenda-skip-unfinished-entries) (org-agenda-overriding-header \u0026#34;All finished tasks: \u0026#34;)) \u0026#34;~/notes/content-org/org-html-exports/Done-All.html\u0026#34;) ;; Inbox for displaying unscheduled tasks. (\u0026#34;I\u0026#34; . \u0026#34;Inbox\u0026#34;) (\u0026#34;Ia\u0026#34; \u0026#34;Inbox for all unfinished TODOs\u0026#34; alltodo \u0026#34;\u0026#34; ((org-agenda-skip-function \u0026#39;tjh/org-agenda-skip-scheduled-entries) (org-agenda-overriding-header \u0026#34;Inbox items: \u0026#34;)) \u0026#34;~/notes/content-org/org-html-exports/Inbox-All.html\u0026#34;) )) 更多column view的命令可以参考19\n其他参考链接 buffer http://incf19.com/yynotes/posts/2022-03-17-18-buffer%E7%AE%A1%E7%90%86%E5%92%8Cibuffer%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/index.html#org1ef9b10\nemacslisp https://kangxiaoning.github.io/post/2021/02/learn-emacs-lisp-part-1/\nOrg-roam User Manual https://www.orgroam.com/manual.html#C-Compiler\n链接 https://blog.csdn.net/wait_for_eva/article/details/113870853\nemacs china https://emacs-china.org\norg-roam discourse https://org-roam.discourse.group\n补全工具 https://emacs-helm.github.io/helm/\n必备扩展 https://www.zhihu.com/question/21943533\nrss https://docs.rsshub.app/\nemacs笔记https://pengpengxp.github.io/archive/before-2018-11-10/2017-06-19-my_emacs_and_lisp_wiki.html#orgcb79882\npurcell\u0026rsquo;s config https://github.com/purcell/emacs.d\nmaster emacs one year https://github.com/redguardtoo/mastering-emacs-in-one-year-guide\nhttps://blog.csdn.net/itguangit/article/details/122192858\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://coldnight.github.io/dump-brain-with-emacs/posts/20220107175445-%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B_%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8_emacs_%E9%85%8D%E7%BD%AE%E7%AF%87\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://blog.51cto.com/darksun/1355334\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/abo-abo/org-download/issues/95\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttp://www.langdebuqing.com/emacs%20notebook/org-mode%20%E8%A1%A8%E6%A0%BC.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://help.jianguoyun.com/?p=2064\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://mp.weixin.qq.com/s/Q2uYIpMl_3yx6dhr5KpsuQ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://kundeveloper.com/blog/buffer-files/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://org-roam.discourse.group/t/how-to-rename-a-note-with-everything-updated-at-the-same-time/300/13\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://ox-hugo.scripter.co/doc/hugo-section/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://gohugo.io/hosting-and-deployment/hosting-on-github/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttp://holbrook.github.io/2012/04/12/emacs_orgmode_editor.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://org-roam.discourse.group/t/how-to-rename-a-note-with-everything-updated-at-the-same-time/300/12\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://mp.ofweek.com/ic/a556714487227\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://zhuanlan.zhihu.com/p/556496150\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttp://holbrook.github.io/2012/04/14/emacs_orgmode_task.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://www.cnblogs.com/quantumman/p/10808374.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://orgmode.org/manual/Using-column-view.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"","id":6,"section":"docs","tags":null,"title":"从零开始使用emacs","uri":"http://cntommy.github.io/docs/20221011163732-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8emacs/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Item First Sub-item Second Sub-item Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"","id":7,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"http://cntommy.github.io/blog/markdown-syntax/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode ","description":"","id":8,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"http://cntommy.github.io/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":9,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"http://cntommy.github.io/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; } ","description":"","id":10,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"http://cntommy.github.io/blog/emoji-support/"}]